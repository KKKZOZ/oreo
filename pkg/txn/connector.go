package txn

type Connector interface {
	// Connect establishes and verifies the connection to the datastore.
	// This operation should be idempotent.
	// Returns nil on successful connection, or an error otherwise.
	Connect() error

	// GetItem retrieves a DataItem, a structured record for transactions.
	// On success, returns the populated DataItem and a nil error.
	// If the item does not exist, it must return a nil (or empty) DataItem
	// and a `txn.KeyNotFound` error.
	GetItem(key string) (DataItem, error)

	// PutItem performs an unconditional write (upsert) of a DataItem.
	// It overwrites any existing item, expecting the provided Version in the
	// value to be the version of record.
	// On success, it returns the **version persisted in the database** along with a nil error.
	// On failure, returns an empty string and an error.
	PutItem(key string, value DataItem) (string, error)

	// ConditionalUpdate provides optimistic concurrency control for DataItems.
	// If `doCreate` is true, it creates the item, failing with `txn.VersionMismatch`
	// if the key already exists.
	// If `doCreate` is false, it updates the item only if its existing version
	// matches the version of the provided `value`.
	// On a successful update or create, it returns the *new version string*
	// generated by the datastore and a nil error.
	// On failure (e.g., version mismatch), it returns an empty string and an error.
	ConditionalUpdate(key string,
		value DataItem, doCreate bool) (string, error)

	// ConditionalCommit atomically finalizes a transaction for a DataItem.
	// It updates the item's state to COMMITTED and sets its TValid, but only
	// if the provided `version` matches the one in the datastore.
	// On success, it returns the *new version string* and a nil error.
	// On failure, returns an empty string and an error.
	ConditionalCommit(key string, version string, tCommit int64) (string, error)

	// Get retrieves a raw string value by its key for non-transactional data.
	// On success, returns the string value and a nil error.
	// If the key does not exist, it must return an empty string and a
	// `txn.KeyNotFound` error.
	Get(name string) (string, error)

	// Put stores a raw key-value pair (unconditional upsert).
	// Returns a nil error on success, or an error on failure.
	Put(name string, value any) error

	// Delete removes an item by its name. This operation must be idempotent.
	// Returns a nil error on success (including when the item did not exist).
	// Returns an error only for unexpected storage-related issues.
	Delete(name string) error

	// AtomicCreate creates a raw key-value pair only if the key does not exist.
	// If the key does not exist, it creates the item and returns an empty string
	// and a nil error.
	// If the key already exists, it returns the *existing value* as a string
	// and a `txn.KeyExists` error.
	AtomicCreate(name string, value any) (string, error)
}
