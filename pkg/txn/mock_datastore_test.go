package txn

import (
	"github.com/oreo-dtx-lab/oreo/pkg/config"
	mock "github.com/stretchr/testify/mock"
)

// MockDatastore is an autogenerated mock type for the Datastore type
type MockDatastore struct {
	mock.Mock
}

type MockDatastore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatastore) EXPECT() *MockDatastore_Expecter {
	return &MockDatastore_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: hasCommitted
func (_m *MockDatastore) Abort(hasCommitted bool) error {
	ret := _m.Called(hasCommitted)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(hasCommitted)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type MockDatastore_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - hasCommitted bool
func (_e *MockDatastore_Expecter) Abort(hasCommitted interface{}) *MockDatastore_Abort_Call {
	return &MockDatastore_Abort_Call{Call: _e.mock.On("Abort", hasCommitted)}
}

func (_c *MockDatastore_Abort_Call) Run(run func(hasCommitted bool)) *MockDatastore_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockDatastore_Abort_Call) Return(_a0 error) *MockDatastore_Abort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Abort_Call) RunAndReturn(run func(bool) error) *MockDatastore_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields:
func (_m *MockDatastore) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockDatastore_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) Commit() *MockDatastore_Commit_Call {
	return &MockDatastore_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockDatastore_Commit_Call) Run(run func()) *MockDatastore_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_Commit_Call) Return(_a0 error) *MockDatastore_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Commit_Call) RunAndReturn(run func() error) *MockDatastore_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields:
func (_m *MockDatastore) Copy() Datastorer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 Datastorer
	if rf, ok := ret.Get(0).(func() Datastorer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Datastorer)
		}
	}

	return r0
}

// MockDatastore_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type MockDatastore_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) Copy() *MockDatastore_Copy_Call {
	return &MockDatastore_Copy_Call{Call: _e.mock.On("Copy")}
}

func (_c *MockDatastore_Copy_Call) Run(run func()) *MockDatastore_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_Copy_Call) Return(_a0 Datastore) *MockDatastore_Copy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Copy_Call) RunAndReturn(run func() Datastore) *MockDatastore_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockDatastore) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDatastore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockDatastore_Expecter) Delete(key interface{}) *MockDatastore_Delete_Call {
	return &MockDatastore_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockDatastore_Delete_Call) Run(run func(key string)) *MockDatastore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDatastore_Delete_Call) Return(_a0 error) *MockDatastore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Delete_Call) RunAndReturn(run func(string) error) *MockDatastore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockDatastore) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDatastore_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockDatastore_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) GetName() *MockDatastore_GetName_Call {
	return &MockDatastore_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockDatastore_GetName_Call) Run(run func()) *MockDatastore_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_GetName_Call) Return(_a0 string) *MockDatastore_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_GetName_Call) RunAndReturn(run func() string) *MockDatastore_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function with given fields:
func (_m *MockDatastore) Prepare() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockDatastore_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) Prepare() *MockDatastore_Prepare_Call {
	return &MockDatastore_Prepare_Call{Call: _e.mock.On("Prepare")}
}

func (_c *MockDatastore_Prepare_Call) Run(run func()) *MockDatastore_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_Prepare_Call) Return(_a0 error) *MockDatastore_Prepare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Prepare_Call) RunAndReturn(run func() error) *MockDatastore_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// Prev provides a mock function with given fields: key, record
func (_m *MockDatastore) Prev(key string, record string) {
	_m.Called(key, record)
}

// MockDatastore_Prev_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prev'
type MockDatastore_Prev_Call struct {
	*mock.Call
}

// Prev is a helper method to define mock.On call
//   - key string
//   - record string
func (_e *MockDatastore_Expecter) Prev(key interface{}, record interface{}) *MockDatastore_Prev_Call {
	return &MockDatastore_Prev_Call{Call: _e.mock.On("Prev", key, record)}
}

func (_c *MockDatastore_Prev_Call) Run(run func(key string, record string)) *MockDatastore_Prev_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDatastore_Prev_Call) Return() *MockDatastore_Prev_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatastore_Prev_Call) RunAndReturn(run func(string, string)) *MockDatastore_Prev_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: key, value
func (_m *MockDatastore) Read(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockDatastore_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockDatastore_Expecter) Read(key interface{}, value interface{}) *MockDatastore_Read_Call {
	return &MockDatastore_Read_Call{Call: _e.mock.On("Read", key, value)}
}

func (_c *MockDatastore_Read_Call) Run(run func(key string, value interface{})) *MockDatastore_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDatastore_Read_Call) Return(_a0 error) *MockDatastore_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Read_Call) RunAndReturn(run func(string, interface{}) error) *MockDatastore_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function with given fields: key
func (_m *MockDatastore) Recover(key string) {
	_m.Called(key)
}

// MockDatastore_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type MockDatastore_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - key string
func (_e *MockDatastore_Expecter) Recover(key interface{}) *MockDatastore_Recover_Call {
	return &MockDatastore_Recover_Call{Call: _e.mock.On("Recover", key)}
}

func (_c *MockDatastore_Recover_Call) Run(run func(key string)) *MockDatastore_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDatastore_Recover_Call) Return() *MockDatastore_Recover_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatastore_Recover_Call) RunAndReturn(run func(string)) *MockDatastore_Recover_Call {
	_c.Call.Return(run)
	return _c
}

// SetTxn provides a mock function with given fields: txn
func (_m *MockDatastore) SetTxn(txn *Transaction) {
	_m.Called(txn)
}

// MockDatastore_SetTxn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTxn'
type MockDatastore_SetTxn_Call struct {
	*mock.Call
}

// SetTxn is a helper method to define mock.On call
//   - txn *Transaction
func (_e *MockDatastore_Expecter) SetTxn(txn interface{}) *MockDatastore_SetTxn_Call {
	return &MockDatastore_SetTxn_Call{Call: _e.mock.On("SetTxn", txn)}
}

func (_c *MockDatastore_SetTxn_Call) Run(run func(txn *Transaction)) *MockDatastore_SetTxn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Transaction))
	})
	return _c
}

func (_c *MockDatastore_SetTxn_Call) Return() *MockDatastore_SetTxn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatastore_SetTxn_Call) RunAndReturn(run func(*Transaction)) *MockDatastore_SetTxn_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *MockDatastore) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDatastore_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockDatastore_Expecter) Start() *MockDatastore_Start_Call {
	return &MockDatastore_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockDatastore_Start_Call) Run(run func()) *MockDatastore_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatastore_Start_Call) Return(_a0 error) *MockDatastore_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Start_Call) RunAndReturn(run func() error) *MockDatastore_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: key, value
func (_m *MockDatastore) Write(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockDatastore_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockDatastore_Expecter) Write(key interface{}, value interface{}) *MockDatastore_Write_Call {
	return &MockDatastore_Write_Call{Call: _e.mock.On("Write", key, value)}
}

func (_c *MockDatastore_Write_Call) Run(run func(key string, value interface{})) *MockDatastore_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDatastore_Write_Call) Return(_a0 error) *MockDatastore_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Write_Call) RunAndReturn(run func(string, interface{}) error) *MockDatastore_Write_Call {
	_c.Call.Return(run)
	return _c
}

func (_m *MockDatastore) OnePhaseCommit() error {
	ret := _m.Called()
	return ret.Error(0)
}

func (_m *MockDatastore) ReadTSR(txnId string) (config.State, error) {
	var r0 config.State
	ret := _m.Called(txnId)
	return r0, ret.Error(0)
}

func (_m *MockDatastore) WriteTSR(txnId string, txnState config.State) error {
	ret := _m.Called(txnId, txnState)
	return ret.Error(0)
}

func (_m *MockDatastore) DeleteTSR(txnId string) error {
	return nil
}

// NewMockDatastore creates a new instance of MockDatastore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatastore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatastore {
	mock := &MockDatastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
